---
title: "4: C intro"
---

# History

Originating as an improvement to the B programming language by Dennis Ritchie started in 1971, C is a low level procedural programming language. Through its early development C looked very different to the language that you will learn in this module.

The first standard of the language that is close to modern C wasn't formalised until the late 1980s. This version was first recognised by American National Standards Institute (ANSI) in 1989 and later International Organization for Standardization (ISO) in 1990. This version is often referred to by acronyms of the organisations that recognised it or the year in which it was recognised (C89/C90)

There have been revisions to the language since but changes in these updates are minor. This is where the main challenge in C comes from; it's simple without the programming shortcuts and quality of life improvements, leaving the programmer doing lots of the heavy lifting.

# Why C?

Get Martin to write this

# Jargon

* Syntax - Like the punctuation of a programming language, describes the required structure for the code to be acceptable,
    - Most important piece of syntax in C is every line ends with a `;`
* Keywords - terms that relate to a  specific instruction in the programming language

# "Hello, world!"
Some may already be familiar  with programs similar to this as this hello world program is a de-facto standard for the first program you will see in any language.

`hello-world.c`
``` c
#include <stdio.h>
int main()
{
   // printf() displays the string inside quotation
   printf("Hello, World!");
   return 0;
}
```
* `#include` is a preprocessor command that allows a c program to use functionality that is implemented in separate c files. More detail will be given on this later in the course

* `int main()` is the entrypoint of a c program, every c program you write will include this i.e. the first line of code run is the first line within the `{}` of main.

* the `//` marks the start of a comment, this part of the code is for notes from/to developers and does not affect the functionality of the program.

* As the comment mentions, `printf()` is used to output stings to the command line.

* The `return` statement sends a status value back to the command line, a 0 status suggest a successful execution.

# How to run this
Programs in c must be compiled and executed separately. These steps are almost always taking place when running code but are sometimes abstracted to a single run button in an IDE.

## The C compiler
The most common c compiler across unix machines is gcc. At its most simple for our use it can simply be run as:
``` bash
gcc hello-world.c
```
This will produce a output executable call a.out that can be run as:
```bash
$ ./a.out
Hello, world!
```
This output file can be renamed using the `-o` option to specify an output file for the compiler e.g.`gcc hello-world.c -o hello-world`

# Variables
## Key parts
A variable made up of 3 things

1. An identifier used in the code to refer to a stored value
2. The location in memory where this data is being stored
3. The data type which is used to specify the way this data should be stored and accessed.

## Data types
In c there are quite a few data types, all but one of them are different ways to store numbers, these fall broadly fall into two categories decimal and integers most commonly represented by the data types `float` and `int` respectively. The other one is `char` use to store an individual character.

## Using variables in c

There are three key actions that can be taken with variables

* Initialization - in c this defines the variables identifier and data type and will trigger the system to assign a portion of memory to it. e.g.
    * `int counter;`
* Assignment - This alters the value of the variable stored in memory. e.g.
    * `counter = 2;`
    * The value that is being assigned can be simply typed in code or the result of an arithmetic calculation
    * These first two steps can be combined into a single line: `int counter = 2;`
* Access - Use of the variable using the identifier in code, this can be in any statement where a value of that data type is required e.g. creating a new variable: `int newCounter = counter + 2;`


# Reading Input
Lets customize the hello world program to say hello to you. We can use a variable and `scanf()` to do this.
``` c
#include <stdio.h>
int main()
{
    char name [20];
    printf("Please enter your name: ");
    scanf("%s", name);
    printf("Hello, %s!\n", name);
    return 0;
}
```
### Breakdown
* The first new line in main initializes an array with id `name`
    - this is a special case of a variable with a single identifier allowing for access to multiple values on a single data type stored continuously. More info will be in later notes.
- The next line outputs similarly to out original hello world program.
- `scanf()` is used to read input from the command line. Within the brackets there are 2 input arguments.
    - `"%s"` specifies that the input will be read as a string - a special case of a character array.
    - `name` specifies the variable that the data should be stored in.
- The usage of `printf()` in the line after is altered compared to the first program:
    - First the `%s` is again used to specify the string, but this time for output. These patterns starting with a `%`, using different letters for different data types, are known as format specifiers and are used across input and output.
    - `\n` is the character representing a newline, improving the output format.
    - `name` specifies which variable to output the data from, if there are multiple format specifiers then there must be an equal and matching number of variables.

# Control flow
Control flow is the process by which the program selects what line should be run next there are different ways to do this:

## Sequential
This is the most simple way and the default, you simply proceed to the next line after each line, as such there are no special structures associated with it.

## Logical expressions
More complex control flow will always require evaluating conditions to make a decision. This is achieved in C using logical expressions. Logical expressions are built from comparisons and logical operators; these either act on static values of variables or a combination.

| Comparison Operator | Name |
|---|---|
| `==` | Equal to |
| `!=` | Note equal to |
| `>` | Greater than |
| `<` | Less than |
| `<=` | Less than or equal to |
| `>=` | Greater than or equal to |

| Logical Operator | Name |
|---|---|
| `&&` | AND |
| `||` | OR |
| `!` | NOT|

### Examples
`counter <= 12`  
`value > threshold || override == 1`  
Eventually you will need to use more complex statements
``` c
source->metaData[WIDTH] + colStartIndex  > destination->metaData[WIDTH] || source->metaData[HEIGHT] + rowStartIndex > destination->metaData[HEIGHT]
```

## Branching 
In branching control flow a selection is made between different segments of code based on a variable or logical expression. The most commonly used branching pattern is the if-else statement:
```c
if(/*Logical Expression*/)
{
    // code run if logical expression is true
}
else
{
    // run code 
}
```
- Additionally `else if` statements can be added to have additiona arguments to control when a block of code is run. 
    - Code within an `else if` block will only run if the conditions for the parent if statement and any previous else if statements are all not met.
- Code within an `else` block are only run if none of the conditions are met
- An `if` statement does not require any subsequent `else` statements.

## Looping
In looping control flow segments of code are executed repeatedly either based on a logical expression (while loop) or for a determined number of loops (for loop).

### While loop
``` c
while(/*logical expression*/)
{
    // code to be run
}
```
The logical expression is evaluated before each time the codeblock is run, making it possible to run the code 0 times.

### For loop
``` c
int i = 0;
for (i = 0; i > /*number of times to loop*/; i++)
{
    // Code to be run
}
```
- In some newer c standards, the first line can be removed and incorporated into the `for()` i.e. `int i = 0; i> ...`
- The variable `i` is a placeholder and is often renamed to improve code readability.

# Notes
* outline what happens in a basic hello world file & compiler
* external libraries
* syntax of variable declaration and assignment
* basic IO
* program flow & syntax
    * if/else
    * looping