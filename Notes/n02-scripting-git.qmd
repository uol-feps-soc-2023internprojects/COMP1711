---
title: "2: Shell scripting"
---

:::{.callout-important}
Instructions in this file are to be run in the same codespace based on 1711-introduction. Make sure to save your changes.
:::

# Aims
- Understand what a shell script is
- Be familiar making and executing shell scripts

# Shell scripts
Shell scripts, often called bash scripts due to the prevalence of the bash script, are text file containing terminal commands that can be run to run all the commands. It is typical but not required in linux to give these files the .sh file extension. These are usually used to automate simple tasks.

First make a a new file in the `scripts` directory called `time.sh`. In the file put these lines:

``` bash
#!/bin/bash
echo $(date)
```
::: {.callout-tip}
To do this use the `mkdir`, `cd`, `touch` and `nano` commands
:::

#### Code breakdown 
* `#!/bin/bash` tells the operating system where to find the shell to run the script. This must be the first string in the first line of the script to ensure portability and reliability.
* `echo` is a command for outputting to the command line.
* `$(date)` is a value maintained by the system and accessible from the command line.

When we wish to execute a program in our current directory we call it as a command by appending `./` to the name. This tells the operating system to look in the current directory for the program to run.

Therefore In order to run the is script we run the command `./time.sh` however at the moment that will give us this output:
``` default
$ ./time.sh
bash: ./time.sh: Permission denied
```

# Why doesn't the script run?
This is as, when creating a new file the default permissions for the file do not allow it to be executed. The current permissions of the file can be checked using the `-l` option for `ls`.
```default
$ ls -l
-rw-rw-rw- 1 codespace codespace 13 Jul  7 09:28 time.sh
```
The part of this output that is relevant to this case is the string `-rw-rw-rw-`

* The first character indicates any special permissions that the directory entry may have e.g. d for directory or l for symbolic link. In our case as `time.sh` is simply a file this is left empty.
* The rest of the string represents the permissions for the file. This is split into 3 different categories for 3 different groups.
    * The three possible permissions are **read**(r), **write**(w) and **execute**(x). If the character is present in the string it means that the action is permitted for that group, otherwise the string will contain a `-`
    * This is repeated three times in the string, first for the owner of the file/directory, next the group assigned to the file/directory and finally all users

So in this case the file can be read and written by all users, but not executed, how can we change this?

# Altering file permissions.
The `chmod` command is used to alter the permissions of files. In this case we want to add executable permission to the file so we must run the command 
``` bash
chmod +x time.sh
```
Once this is done, you can rerun the script and see the output.

# Reminder of key steps to make a shell script

1. Make file with .sh extension
2. Put `#!/bin/bash` at the start of the file. 
3. Change the permissions so the file is executable.

# A more complex example:
`scripts/dataAnalysis1.sh`
``` bash
#!/bin/bash

cat data/values* > output.txt
sed -i 's/\s/\n/g' output.txt 
sed -i '/^$/d' output.txt 
sort -no output.txt output.txt
head -n1 output.txt
tail -n1 output.txt
rm output.txt
```
Run this script from the root of the git repo using `./scripts/dataAnalysis1.sh` Then run each of the commands that the script will run individually and inspect the contents of `output.txt` to see what the command has done.

::: {.callout-important}
Given this script is using relative paths it will only work when it is being run from the the root of the repository.   
This is as the working directory for the script is the same as the working directory where it is run.
:::

Lets break down what this is doing:

* First line uses `cat` to output all files in directories starting data/values. It does this using the wildcard operator `*` to select all of these files. The output is then redirected to the file `output.txt` using `>`.
* `output.txt` now contains all the values, but not in the format we want. Therefore we use the stream editor `sed` to first split the values onto different lines using the pattern `'s/\s/\n/g'`. Then we remove any blank lines using the pattern `/^$/d`. 
* Next we sort the file. The options `-n` specifies to sort numerically and `-o` allows for the specifying of an output file.
* `head -n1` and `tail -n1` will output the first and last values respectively 
* Finally `rm` removes out temporary file.

# Another way
From the root of the git repo run the command 

`cat data/values* | sed 's/\s/\n/g' | sed '/^$/d' | sort -n | (head -n1 && tail -n1)`

This condenses the whole of the previous script into a single line using pipes `|`. Pipes redirect output from one command to the next. This is still not really worth typing repeatedly so would likely be put in a script for reuse. 

This script can be found in `scripts/dataAnalysis2.sh`

This does have a significant performance benefit though that can be seen by using the `time` command to measure the performance of each script. Try this yourself.

:::{.callout-important}
Remember to save your changes to your Codespace.
:::
