---
title: "2: Bash scripting and git"
---
Instructions in this file are to be run in the same codespace as from the into to the terminal.

# Bash scripts
Bash scripts are text file containing terminal commands that can be run to run all the commands. It is typical but not required in linux to give these files the .sh file extension. These are usually used to automate simple tasks.

First make a a new directory called `scripts` and navigate to it. And make a file called `time.sh`. In the file put these lines:
``` bash
#!/bin/bash
echo $(date)
```
* `#!/bin/bash` tells the operating system where to find the shell to run the script. This must be the first string in the first line of the script to ensure portability and reliability.
* `echo` is a command for outputting to the command line.
* `$(date)` is a value maintained by the system and accessible from the command line.

When we wish to execute a program in our current directory we call it as a command by appending `./` to the name. This tells the operating system to look in the current directory for the program to run.

Therefore In order to run the is script we run the command `./time.sh` however at the moment that will give us this output:
``` bash
$ ./time.sh
bash: ./time.sh: Permission denied
```

# Why doesn't the script run?
This is as, when creating a new file the default permissions for the file do not allow it to be executed. The current permissions of the file can be checked using the `-l` option for `ls`.
```bash
$ ls -l
-rw-rw-rw- 1 codespace codespace 13 Jul  7 09:28 time.sh
```
The part of this output that is relevant to this case is the string `-rw-rw-rw-`

* The first character indicates any special permissions that the directory entry may have e.g. d for directory or l for symbolic link. In our case as `time.sh` is simply a file this is left empty.
* The rest of the string represents the permissions for the file. This is split into 3 different catagories for 3 different groups.
    * The three possible permissions are read(r), write(w) and execute(x). If the character is present in the string it means that the action is permitted for that group, otherwise the string will contain a `-`
    * This is repeated three times in the string, first for the owner of the file/directory, next the group assigned to the file/directory and finally all users

So in this case the file can be read and written by all users, but not executed, how can we change this?

# Altering file permissions.
The `chmod` command is used to alter the permissions of files. In this case we want to add executable permission to the file so we must run the command 
``` bash
chmod +x time.sh
```
Once this is done, you can rerun the script and see the output.