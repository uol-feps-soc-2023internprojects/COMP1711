---
title: "6: Functions and arguments in C"
---

# Aims
- Understand what a 

# What is a function?
In general a function is defined as a set of program instructions that perform a specific task and are packaged together. Functions are often described as black boxes as they receive input and create some output but it is not necessary to understand their inner workings to use them effectively.

This interface is implemented in code most commonly using parameters and return values.
- Parameters are passed to functions using brackets in the function call.
- These calls are evaluated to the return value of function.

## Function Definitions 
Functions have to be defined in code before they can be used in function calls. These definitions contain some key parts:

- Definition of type
    - functions have type definitions in the same way as variables to indicate the kind of value that they will return
    - 
- Definition of identifier
    - functions, like variables, have names that must be defined
- Definition of parameters
    - The function defines the type and identifier to be used in the function body for each of the parameters

## Function calls
The notation for calls is fairly standard and has the function identifier followed by the list of parameters within brackets e.g. 
``` default
functionId(value1, value2)
```

## Function body
In the same why that a variable is a piece of data that can be referenced with an identifier, a function is a section of code that can be referenced with an identifier. This section of code is defined in the 'function body'

It is expected by the compiler that there will be a `return` statement within this codeblock that will have a value of equal type to the specified type of the function.

To write a function without a return value the `void` type is used. This is often used for outputting data in a particular format.

# Functions in c
This section of the notes will outline the way in which functions can be used and defined in C.
## C function Definition
This is a basic template for a function definition in c.
``` C
returnType identifier(parameterType parameterId, ...)
{
    //code to be run
    return value;
}

```
## Calling a function
When calling a function the compiler, generally, expects to receive a value for each parameter in a pattern equal to that in which they are defined.

e.g. for this simple function:
``` c
int sum( int a, int b )
{
    int c = a + b;
    return c;
}
```
A valid function call would be: `sum(1,2)` Though this would likely be only part of a line of code: `int total = sum(1, 2);`

TODO: add note about calling arguments after they are defined??

## Functions that you have already used
- `scanf` to read input from the command line
- `printf` to output to the command line
- `main` as the entrypoint to your program


## Example
This example shows a simple program making use of a function.  

`temperature.c`
``` c
#include <stdio.h>

// Function to convert a temperature in celsius to Fahrenheit.
float celsiusToF(float inputTemp)
{
    return (inputTemp * 1.8f) +32;
}

int main()
{
    float userTemp = 0;
    printf("Please enter a temperature in celsius. ");
    scanf("%f", &userTemp);
    printf("That is equivalent to %f fahrenheit.\n", celsiusToF(userTemp));
    return 0;
}
```

# Program arguments

maybe rearrange so that this is explained after arrays (and maybe pointers)

In all the examples that we have used so far the main function , which acts as the entry point for execution has had no parameters. Does this mean that there is no way to pass values to our programs from the command line?

No this isn't the case we use to special parameters for the main function defined as such:
``` c
int main(int argc, char * argv[])
{
    // Code
    return 0;
}
```

This will allow you to access the arguments used to run the executable from within the program. There are 2 key values involved in this:

- argc
    - This is an integer counter for the number of arguments.
    - Arguments are counted as strings that are separated by spaces
    - The name of the program is counted as the first argument so argc >=1

- \* argv[]
    - array of strings 
    - first string is the name of the executable
    - subsequent strings are the values of the command line arguments

## Example
Here we take the previous example and adapt it to take the input at the time the program is run.

`temperatureCLI.c`
``` c
#include <stdio.h>
#include <stdlib.h>

// Function to convert a temperature in celsius to Fahrenheit.
float celsiusToF(float inputTemp)
{
    return (inputTemp * 1.8f) +32;
}

int main(int argc, char * argv[])
{
    float input = atof(argv[1]);
    printf("%f celsius is equivalent to %f fahrenheit.\n", input, celsiusToF(input));
    return 0;
}
```
### Breakdown:
- Here the special function `atof()` is used. 
    - The name of this function is a shortening  of "ASCII" to float.
    - The function takes a string as an input and returns the float value represented by the string.
- The program passes `argv[1]` to the function. 
    - This assumes that the first value after the command name (which will be `argv[0]`) will be the temperature in celsius.

# Libraries
In previous examples you have been using functions that have been written in the same file as they are called in. 

This is with the exception of `scanf` and `printf`. These are accessible due to the `#include <stdio.h>` statement at the top of most or all of the C files you have seen.

`#include` statements reference files with the `.h` extension that are called  'header' files. These files are looked at in the early stages of compilation and provide a 'prototype' of the functions (or other) that will be defined in the corresponding `.c` file.

In the case of `stdio.h` these functions and definitions are stored in shared libraries in the source code. But it is simple to include files of your own creation. 

## Example
We can now create a new version of our original temperature program using these ideas.

`tempConversion.h`
``` c
float celsiusToF(float inputTemp);
```
`tempConversion.c`
``` c
// Function to convert a temperature in celsius to Fahrenheit.
float celsiusToF(float inputTemp)
{
    return (inputTemp * 1.8f) +32;
}
```
`temperatureV2.c`
``` c
#include <stdio.h>
#include "tempConversion.h"

int main()
{
    float userTemp = 0;
    printf("Please enter a temperature in celsius. ");
    scanf("%f", &userTemp);
    printf("That is equivalent to %f fahrenheit.\n", celsiusToF(userTemp));
    return 0;
}
```
### Breakdown
- Here we can see that the function implementation that was previously in the `temperature.c` file has now been moved to a separate `tempConversion.c` file.
    - The header file `tempConversion.h` is used to declare which parts of `tempConversion.c` should be accessible to other files.
    - This is done as a separate file as it is mainly relevant to c files that are importing the code rather than the code itself TODO; rewrite this?

- In order to compile this code we must include `tempConversion.c` in the compilation command. Therefore the compilation would look something like this:
    - (run from `/c-basics`) `gcc temperatureV2.c tempConversion.c`


# Recursion
