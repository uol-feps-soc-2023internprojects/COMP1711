---
title: "5: C for the Microbit"
---

# Aims

# What is the Microbit?
![[Image Source](https://makecode.microbit.org/device)](/img/microbit.png){fig-alt="Diagram labeling the Microbit's different sensors and output options"}

The BBC Microbit is a single board computer designed to help teach children to code. In most cases it is programmed using a codeblock interface or using python, in this module we will write code for the microbit using C.

The reduced function set in C allows us to focus on the fundamentals of procedural programming and gives a more realistic impression of real world coding for embedded systems

You will write code for the Microbit in a Codespace with special configuration, this is required as the compilation of the code for the microbit requires specific libraries.

<!-- ## Why should we use the microbit -->

# Microbit Coding environment setup

## Repository setup
- In a new repository created on github with a README.md, press on the green button marked as code and select the Codespaces tab within the popup. In this menu select the ellipsis to get a new dropdown.  
![](/img/github_code.png)  

- From this dropdown select the option that reads configure dev container  
![](/img/config-dec-cont.png)

- This will open a new page with a json file open as the main part of the window. In this file change the value of the image attribute to `ghcr.io/uol-feps-soc-2023internprojects/microbit-devcontainer:v0.7` once this is done the file should look as such:  
![](/img/devcontainer-json-example.png)

- Finally select the green commit changes button at the top of the page and confirm that you wish to commit the changes to main in the popup. Once this is done navigate back to the homepage of the new repository.

## Opening the codespace
If you now navigate back to the codespace menu from the last step you can "create codespace on main" this will launch a new browser tab. It may take a little bit of time to build.

## Project bootstrap
In the terminal within codespaces run   
``` bash
curl https://raw.githubusercontent.com/uol-feps-soc-2023internprojects/codal-bootstrap/main/build.py > build.py
```
This will download the python script that is used to bootstrap and/or build the project.

To bootstrap the project, run the command: `python build.py codal-microbit-v2`. This will download all the files that you need to write code for the microbit and will make a template project. 

To build this project, run the command: `python build.py`. This will build the template project and output the files created, most importantly `MICROBIT.hex` which is the file that can be loaded to the microbit.

## Flashing the Microbit
Once the project has been bootstrapped and built, the MICROBIT.hex file can be downloaded from codespaces. Then, with the Microbit connected over usb, this file can be copied over to the device. Sometimes this process can be temperamental and give a '504' error, if this happens simply try again.

The default project should create a program that scrolls the text "Hello, Bootstrap!" over the leds.

# How to edit the code
The code that is compiled to the hex files is all within the `/source` subdirectory. You will see that the file in there by default is only `main.cpp`. While this is technically a C++ file, we will continue to essentially just write C. This is possible as C++ is a superset of C. 

The build script will treat all cpp source files in this directory as part of the source code.

`main.cpp`
``` cpp
#include "MicroBit.h"

// The Micro:bit control object
MicroBit uBit;

// Out main function, run at startup
int main() {

    // Loop forever
    while( true ) {
        // Scroll some text on the display
        uBit.display.scroll( "Hello, Bootstrap!" );
    }

    // Will never return, but here so the compiler is happy :)
    return 0;
}
```
- This program uses the `while( true )` pattern to loop infinitely 
    - While in most application C code this would be considered poor code, this is good idea for this use case as the program is intended to run forever.
- The line `MicroBit uBit;` is very important to the code as it initialises the interface to the hardware.
- The dot notation that is used for the functions is similar to that used in python, it uses OOP principals but it is not necessary to understand this to use this in code.

# Output options
The first of the output options is used in the example above. This option will move whatever input data it receives from right to left on the screen.
`uBit.display.scroll(<text, character or image>)`

This option will simply display the character or the image passed to it on the screen.
`uBit.display.print(<character or image>)`

Use this to change the value of specific pixels.
`uBit.display.image.setPixelValue(<x axis position>, <y axis position>, <int brightness (0-255)>);`

# Microbit images
These are defined in a different way to the normal variables you have previously met in C. In this case  the identifier of the variable is 'cross' and the data in the brackets defines the data that will be stored.
`MicroBitImage cross("0,255,0\n255,255,255\n0,255,0\n");`

The format of the input data is a string containing integers (0-255), representing the light level for a pixel, separated by commas. The `\n` characters represent new lines in the image. 

In practice these images will often be 5x5 as this is the size of the Microbit screen.

# Sleep
The Microbit can also be given the command to not execute commands for a specified amount of time. This command is called `sleep` and can be called as:
`uBit.sleep(<time in ms>)`

# Buttons
The library in use allows for programs to sense if a the buttons on the device are being pressed. These code snippets can simply be used in control statements to branch or loop based on environment of the Microbit.
`uBit.buttonA.isPressed()`
`uBit.buttonB.isPressed()`
`uBit.buttonAB.isPressed()`

<!-- Add examples -->