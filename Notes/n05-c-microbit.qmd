---
title: "5: C for the Microbit"
---

# Setting up a repository to write C for the Microbit v2

## Environment setup
- In a new repository created with a README.md press on the green button marked as code and select the tab in the popup reading Codespaces. In this menu select the ellipsis to get a new dropdown.  
![](/img/github_code.png)  

- From this dropdown select the option that reads configure dev container  
![](/img/config-dec-cont.png)

- This will open a new page with a json file open as the main part of the window. In this file change the value of the image attribute to `ghcr.io/uol-feps-soc-2023internprojects/microbit-devcontainer:v0.7` once this is done the file should look as such:
![](/img/devcontainer-json-example.png)

- Finally select the green commit changes button at the top of the page and confirm that you wish to commit the changes to main in the popup. Once this is done navigate back to the homepage of the repository.

## Opening the codespace
If you now navigate back to the codespace menu from the last step you can "create codespace on main" this will launch a new browser tab. It may take a little bit of time to build.

## Project bootstrap
In the terminal within codespaces run   
``` bash
curl https://raw.githubusercontent.com/lancaster-university/codal-bootstrap/main/build.py > build.py
```
This will download the python script that is used to bootstrap and/or build the project.

The first command here is used to bootstrap the project, and the second is used to build the project. Projects only need to be bootstrapped once.
``` default
python build.py codal-microbit-v2
python build.py
```
Once compiled the repository will have many more files. Most importantly the **MICROBIT.hex** which is the program which can be loaded to the Microbit.

## Flashing the Microbit
Once the project has been bootstrapped and built, the MICROBIT.hex file can be downloaded from codespaces. Then, with the Microbit connected over usb, this file can be copied over to the device.

the default project should create a program that scrolls the text "Hello, Bootstrap!" over the leds.

# How to edit the code
The code that is compiled to the hex files is all within the `/source` subdirectory. You will see that the file in there by default is `main.cpp`. While this is technically a C++ file, we will continue to essentially just write C. This is possible as C++ is a superset of C. 

The build script will treat all cpp source files in this directory as part of the source code.

`main.cpp`
``` cpp
#include "MicroBit.h"

// The Micro:bit control object
MicroBit uBit;

// Out main function, run at startup
int main() {

    // Loop forever
    while( true ) {
        // Scroll some text on the display
        uBit.display.scroll( "Hello, Bootstrap!" );
    }

    // Will never return, but here so the compiler is happy :)
    return 0;
}
```
- This program uses the `while( true )` pattern to loop infinitely 


ask martin for advice on how to explain away OOP

# Output options
The first of the output options is used in the example above. This option will move whatever input data it receives from right to left on the screen.
`uBit.display.scroll(<text, character or image>)`

This option will simply display the character or the image passed to it on the screen.
`uBit.display.print(<character or image>)`

Use this to change the value of specific pixels.
`uBit.display.image.setPixelValue(<x axis position>, <y axis position>, <int brightness (0-255)>);`

# Microbit images
These are defined in a different way to the normal variables you have previously met in C. In this case  the identifier of the variable is 'cross' and the data in the brackets defines the data that will be stored.
`MicroBitImage cross("0,255,0\n255,255,255\n0,255,0\n");`

The format of the input data is a string containing integers (0-255), representing the light level for a pixel, separated by commas. The `\n` characters represent new lines in the image. 

In practice these images will often be 5x5 as this is the size of the Microbit screen.

# Sleep
The Microbit can also be given the command to not execute commands for a specified amount of time. This command is called `sleep` and can be called as:
`uBit.sleep(<time in ms>)`

# Buttons
The codal abstraction layer allows for programs to sense if a the buttons on the device are being pressed. These code snippets can simply be used in control statements to branch or loop based on environment of the Microbit.
`uBit.buttonA.isPressed()`
`uBit.buttonB.isPressed()`
`uBit.buttonAB.isPressed()`