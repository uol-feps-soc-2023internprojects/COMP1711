---
title: "1: Intro to the terminal and codespaces."
---

# The terminal
The terminal is a window on a machine that allows for the input and output of text. The shell is the primary interface that is run within the terminal, creating a command line interface (CLI). Choice of shell will effect user experience but not functionality, common shells include: bash, zhs, and fish.

# Opening a Codespace
Follow these steps to create a new repository from a template and open it in codespaces.

1. Visit this link, logged into your github account: https://github.com/uol-feps-soc-2023internprojects/shell-training

2. From the use this template dropdown select the option to create a new repository.

![](/img/repo-from-template.png)
blank template for a codespace to follow this tutorial:
3. On the repository creation page, select your account as the owner and give the repo an appropriate and memorable name. You may add a description if you like. Once configured, confirm with the "create repository from template" button at the bottom of the page. This will redirect you to the repo homepage.

4. On the repo homepage click on green button marked as code and select the tab in the popup reading Codespaces. Within this tab click on "Create codespace on main" this will open a new tab with your codespace.

![](/img/github_code.png)

5. This environment will look very familiar to those who have used vs code before and is comprised of 3 main elements. The editor window, the file explorer and the terminal window: labeled in the image below.

![](/img/codespace.png)

# What is github Codespaces?
Github codespaces is a development environment for your repositories that is hosted in the cloud by github. It provides an interface very similar to the popular IDE vscode and is running in a linux environment.

:::{.callout-note}
More will be explained about git, github and version control in the future.
:::

# Using the Terminal
## The prompt
As a user when you open a terminal you will be greeted by a prompt. On codespaces this prompt will often take the form `@{user} -> workspace/{repository} $` whereas on a standard linux machine the prompt often takes the form `{user}@{hostname} $`. Because of these differences most sources of information will simply show the prompt as the single `$` that normally ends a prompt when they describe commands, it is important to remember that this symbol is not part of the command.

## Your first command
Select your terminal and type the command `pwd` after the prompt. (pwd is an acronym for print working directory). Your output should be similar to what is seen below:
``` bash
$ pwd
/workspaces/repository-name
```
This command will print the absolute path of the current working directory, that is the location in the file system that the commands being run in the shell are being executed. The slash at the start of the path represents the root of the filesystem and the subsequent terms represent a series of hierarchical directories.

## Seeing your files
Now try the `ls` command. (ls is a shortening of the word list)
This will output a list of the contents of the current directory.
``` bash
$ ls
IOM-animals  data  some-maths.txt  wildcards
```
In most terminals this will be highlighted to suggest the kind of file system entry that each item is but otherwise we can use a slightly changed command to view this information. 
``` bash
$ ls -F
IOM-animals/  data/  some-maths.txt  wildcards/
```
This command will append a trailing character to different types of directory entry: / for nested directories, * for executables, and @ for links. In the above example we can see 3 directories and a file.  

The `-F` part of this command is known as an option.

## Options  
Options are used to modify the behavior of a command being run and can do many different things. Rerunning the ls command again with the option `-a` will additionally reveal all the 'hidden' items in the directory (all the items with names starting with a `.`). There are two special items that will be revealed when using this option those are `.` and `..`: `.` is used as a reference to the current directory and `..` is used as a reference to the parent directory.

Using the `-l` command will output a table with lots of additional information about the directory entries including size and last edit time. You should try this out.

:::{.callout-tip}
You can combine multiple different options together to apply all their effects
:::

## Navigation
Most terminals will open to the home directory of the account or machine that is being run, though this is often not the directory whe one would want to run commands. Therefore, there must be a way to navigate through the file system, in most machines that is using the `cd` command. This command takes a path as an value after the command (called an argument in this case). These can either be an absolute path or a relative path.

cd is a particularly important case for the use of the parent directory `..` as you often want to navigate back through parent directories.

:::{.callout-important}
**Absolute** path start with a `/` and reference the same file or location regardless of the current working directory.  
**Relative** paths do **not** start with a `/` and reference file or location from the current working directory.
:::
``` bash
$ pwd
/workspaces/repository-name
$ cd IOM-animals
$ pwd
/workspaces/repository-name/IOM-animals
$ ls -F
amphibians.txt  birds.txt  insects.txt  mammals.txt  reptiles.txt
$ cd .. 
$ pwd
/workspaces/repository-name
```
The command can also be run without any arguments, this will navigate back to the home directory of the account. In unix systems this home directory is often denoted by a `~`.

## New directories and files
The `mkdir` command can be used to create new directories with an argument as the directory name. We can use `ls` to see the new directory.
``` bash
$ mkdir test-dir
$ ls -F
```
We can then use the `touch` command to create a new file at the location specified by the argument. This example also shows the use of ls with an argument for directory.
``` bash
$ touch test-dir/temp.txt
$ ls test-dir
temp.txt
```
::: {.callout-tip}
If your terminal is feeling cluttered you can use the `clear` command to empty it.
:::

## Putting information in the files
Given that codespaces is a modern IDE this can be done very easily through the editor, as can the last step we covered. However it is a useful skill to know. This can be done firstly with output redirection. Try running this command.
``` bash
echo "This text is in a file" > test-dir/temp.txt
``` 
Lets break down what this is doing.
* `echo` is a command to output its argument. In this case that argument is the string "This text is in a file"
* `>` is known as a redirection. This takes the output from the command to the left of it and outputs it to a file, in this case test-dir/temp.txt.

This can be tested either using the editor user interface or by using the command `cat` with the file in question as the argument. This command will output the contents of the file to the  command line.

::: {.callout-tip}
For longer files where an unstructured output would be difficult to read in the command line you can also use the command `less`
:::

## Command line text editors
While most of the time you will be able to use an IDE like codespaces or vscode, it is still a useful to know how to edit files at the command line. `vi` is very famous but the simplest to use is probably `nano`.

* to open a file with `nano` run the command with the file to edit as the argument
* You can use the arrow keys to navigate the file and type to edit. Add something to your file.
* Finally use `ctlr+X` to exit, type 'Y' to agree to save and enter to confirm the file name. Use `cat` or `less` to view your updated files.

## Moving and editing files
The `mv` and `cp` commands are for moving files and copying files respectively and have similar usage as seen below.
``` bash
mv current-file-path new-file-path
cp current-file new-file
```
A useful extra application of mv is to rename files.

## Deleting files and directories 
The `rm` command can be used for this, but be very careful as items deleted with this command are gone permanently when the command is run. The `-r` option can be used to delete a directory along with its files and all subdirectories.

## Do I need to remember all of this?
No, the command `man` can be used to find details on different commands, listing different options to use and arguments you can give it. If you run this for `ls` you will be able to find details on the arguments and options discussed earlier.

